---

- hosts: sentry
  remote_user: root
  vars_files:
    - ../vars/default.yml
    - ../vars/credentials.yml

  vars:
    app_name: sentry
    # TODO: add list of domains
    domain_main: log.mif.io
    root_dir: "{{root_apps_dir}}/{{app_name}}"
    sentry_secret: "jJrfpryzkEqeYLB1AdPTQqHIF0XwnVTDgpI3YMWbLRFardpA2JKcpH80lPrB4cF"

  tasks:
    - pip: name=pexpect

    - name: Create directory for an data
      file: "path={{root_dir}}/data/pg state=directory"

    - name: Create directory for SSL cert hook (.well-known/acme-challenge)
      file: "path={{root_dir}}/acme state=directory"


    - name: Create remote docker-compose.yml
      copy:
        dest: "{{root_dir}}/docker-compose.yml"
        content: |
          version: '2'
          volumes:
            pgdb:
          services:

            redis:
              image: redis:3.2
            postgres:
              image: 'eeacms/postgres:9.5'
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DBNAME: sentry
                POSTGRES_DBUSER: sentry
                POSTGRES_DBPASS: sentry
              volumes:
               - pgdb:/var/lib/postgresql/data

            sentry:
              image: sentry:8.8
              depends_on:
               - redis
               - postgres
              links:
               - redis
               - postgres
              ports:
               - 9000:9000
              environment:
                SENTRY_SECRET_KEY: {{sentry_secret}}
                SENTRY_POSTGRES_HOST: postgres
                SENTRY_DB_USER: postgres
                SENTRY_DB_PASSWORD: postgres
                SENTRY_REDIS_HOST: redis

            sentry_celery_beat:
              image: sentry:8.8
              depends_on:
               - redis
               - postgres
              command: "sentry celery beat --pidfile=/tmp/celerybeat-sentry.pid"
              environment:
                SENTRY_SECRET_KEY: {{sentry_secret}}
                SENTRY_POSTGRES_HOST: postgres
                SENTRY_DB_USER: postgres
                SENTRY_DB_PASSWORD: postgres
                SENTRY_REDIS_HOST: redis

            sentry_celery_worker:
              image: sentry:8.8
              depends_on:
               - redis
               - postgres
              command: "sentry celery worker"
              environment:
                SENTRY_SECRET_KEY: {{sentry_secret}}
                SENTRY_POSTGRES_HOST: postgres
                SENTRY_DB_USER: postgres
                SENTRY_DB_PASSWORD: postgres
                SENTRY_REDIS_HOST: redis

    - name: Run docker-compose
      docker_service:
        state: present
        recreate: always
        project_src: "{{root_dir}}"

    - pause: seconds=20
    - expect:
        command: docker-compose exec sentry bash -c "sentry upgrade"
        chdir: "{{root_dir}}"
        responses:
          # Would you like to create a user account now? [Y/n]:
          (?i)would: Y
          #
          (?i)email: mikeifomin@gmail.com
          (?i)password: qwerty
          # Repeat for confirmation:
          (?i)repeat: qwerty
          # Should this user be a superuser? [y/N]:
          (?i)should: Y
    #


#
# Created internal Sentry project (slug=internal, id=1)
#
#
#
#
#  mikeifomin@gmail.com
# Password:
# Repeat for confirmation:
# Should this user be a superuser? [y/N]:


    # - name: Gen nginx upstream files
    #   copy:
    #     dest: "{{conf_balancer_dir}}/{{app_name}}.upstream"
    #     content: |
    #       # autogenerated by docker_service
    #       upstream {{app_name}} {
    #         {% for conteiner_name, value in node.iteritems() %}
    #           server {{conteiner_name}}:3000 ;
    #         {% endfor %}
    #       }
    #
    # # TODO: backup conf file. or create new and if changed backup old one
    # - name: Gen nginx conf file (with acme .well-known)
    #   copy:
    #     dest: "{{conf_balancer_dir}}/{{app_name}}.conf"
    #     content: |
    #       server {
    #         listen       80;
    #         server_name  {{domain_main}};
    #         # access_log   logs/domain2.access.log  main;
    #
    #         # serve static files
    #         # location ~ ^/(images|javascript|js|css|flash|media|static)/  {
    #         #   root    /var/www/virtual/big.server.com/htdocs;
    #         #   expires 30d;
    #         # }
    #
    #         # this import for SSL letsencrypt
    #         location ~ /.well-known {
    #             root {{in_container_acme_dir}};
    #         }
    #         location / {
    #           # see {{app_name}}.upstream file
    #           proxy_pass      http://{{app_name}};
    #         }
    #       }
    #
    # - name: Reload balancer for make available http://<host>:80/.well-known/...
    #   command: docker exec balancer nginx -s reload
    #
    # # TODO: check availabilty /.well-known
    # # if bad remove or rename conf file. for example <app_name>.conf.error
    #
    # - name: Create request-domains.txt - file with domains should be created
    #   copy:
    #     dest: "{{root_dir}}/acme/request-domains.txt"
    #     content: |
    #         {{domain_main}}
    #
    # - name: Ask letsencrypt
    #   command: docker restart letsencrypt
    #
    # - name: Await cert file (on host machine not container)
    #   wait_for:
    #     path: "{{root_balancer_dir}}/letsencrypt/live/{{domain_main}}/fullchain.pem"
    #
    # - name: Gen nginx SSL conf file
    #   copy:
    #     dest: "{{conf_balancer_dir}}/{{app_name}}.ssl.conf"
    #     content: |
    #       server {
    #
    #         listen 443 ssl http2;
    #         listen [::]:443 ssl http2;
    #         server_name {{domain_main}};
    #
    #         ssl_certificate /etc/letsencrypt/live/{{domain_main}}/fullchain.pem;
    #         ssl_certificate_key /etc/letsencrypt/live/{{domain_main}}/privkey.pem;
    #         include /etc/nginx/snippets/ssl-params.conf;
    #
    #         location / {
    #             proxy_pass      http://{{app_name}};
    #         }
    #       }
    #
    # - name: Reload balancer
    #   command: docker exec balancer nginx -s reload
    #

    # TODO: waiting for url
