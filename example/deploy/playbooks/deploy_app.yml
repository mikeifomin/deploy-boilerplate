---

- hosts: main
  remote_user: root
  vars_files:
    - ../vars/default.yml
    - ../vars/credentials.yml

  vars:
    app_name: app
    # TODO: add list of domains
    domain_main: dev.mif.io
    root_dir: "{{root_apps_dir}}/{{app_name}}"

  tasks:

    - name: Create directory for an application code
      file: "path={{root_dir}}/code state=directory"

    - name: Create directory for SSL cert hook (.well-known/acme-challenge)
      file: "path={{root_dir}}/acme state=directory"

    - name: Sync app code
      synchronize:
        src: ../../server/
        dest: "{{root_dir}}/code/"
        # http://unix.stackexchange.com/questions/2161/rsync-filter-copying-one-pattern-only/2503#2503
        rsync_opts:
          - "--include='src/***'"
          - "--include='Dockerfile'"
          - "--include='package.json'"
          - "--exclude='*'"

    - name: Run docker-compose
      docker_service:
        state: present
        recreate: always
        project_name: "{{app_name}}"
        scale:
          node: 3
        definition:
          version: '2'
          services:
            # `node` key will be used for nginx upstream list
            # `node.iteritems()`
            node:
              build: "{{root_dir}}/code"
              restart: always

          # this stuff guarantee that the balancer container will have
          # access to current containers
          networks:
            default:
              external:
                name: balancer_network

    - name: Gen nginx upstream files
      copy:
        dest: "{{conf_balancer_dir}}/{{app_name}}.upstream"
        content: |
          # autogenerated by docker_service
          upstream {{app_name}} {
            {% for conteiner_name, value in node.iteritems() %}
              server {{conteiner_name}}:3000 ;
            {% endfor %}
          }

    # TODO: backup conf file. or create new and if changed backup old one
    - name: Gen nginx conf file (with acme .well-known)
      copy:
        dest: "{{conf_balancer_dir}}/{{app_name}}.conf"
        content: |
          server {
            listen       80;
            server_name  {{domain_main}};
            # access_log   logs/domain2.access.log  main;

            # serve static files
            # location ~ ^/(images|javascript|js|css|flash|media|static)/  {
            #   root    /var/www/virtual/big.server.com/htdocs;
            #   expires 30d;
            # }

            # this import for SSL letsencrypt
            location ~ /.well-known {
                root {{in_container_acme_dir}};
            }
            location / {
              # see {{app_name}}.upstream file
              proxy_pass      http://{{app_name}};
            }
          }

    - name: Reload balancer for make available http://<host>:80/.well-known/...
      command: docker exec balancer nginx -s reload

    # TODO: check availabilty /.well-known
    # if bad remove or rename conf file. for example <app_name>.conf.error

    - name: Create request-domains.txt - file with domains should be created
      copy:
        dest: "{{root_dir}}/acme/request-domains.txt"
        content: |
            {{domain_main}}

    - name: Ask letsencrypt
      command: docker restart letsencrypt

    - name: Await cert file (on host machine not container)
      wait_for:
        path: "{{root_balancer_dir}}/letsencrypt/live/{{domain_main}}/fullchain.pem"

    - name: Gen nginx SSL conf file
      copy:
        dest: "{{conf_balancer_dir}}/{{app_name}}.ssl.conf"
        content: |
          server {

            listen 443 ssl http2 default_server;
            listen [::]:443 ssl http2 default_server;
            server_name {{domain_main}};

            ssl_certificate /etc/letsencrypt/live/{{domain_main}}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/{{domain_main}}/privkey.pem;
            include /etc/ngins/snippets/ssl-params.conf;

            location / {
                proxy_pass      http://{{app_name}};
            }
          }

    - name: Reload balancer
      command: docker exec balancer nginx -s reload


    # TODO: waiting for url
