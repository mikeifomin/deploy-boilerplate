---

- hosts: main
  remote_user: root
  vars_files:
    - ../vars/default.yml
    - ../vars/credentials.yml

  tasks:

    - name: Create directories for common logs and errors
      file: "path={{root_balancer_dir}}/logs state=directory"

    - name: Create acme/.well-known directory
      file: "path={{acme_dir}}/.well-known state=directory"

    - name: Sync custom letsencrypt_worker app
      synchronize:
          src: ../letsencrypt/
          dest: "{{root_balancer_dir}}/letsencrypt-code/"

    - name: Gen main nginx.conf
      template:
          src: ../templates/nginx.jinja2.conf
          dest: "{{root_balancer_dir}}/nginx.conf"

    - name: create docker-compose.yml
      copy:
        dest: "{{root_balancer_dir}}/docker-compose.yml"
        content: |
          version: '2'
          services:
            nginx:
              image: nginx
              restart: always
              container_name: balancer
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./snippets:/etc/ngins/snippets
                - ./conf.d:/etc/nginx/conf.d:ro
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
                - ./logs:/var/log/nginx
                - "./acme:{{in_container_acme_dir}}"
                - ./letsencrypt/:/etc/letsencrypt/:ro
              networks:
                - network
            letsencrypt:
              container_name: letsencrypt
              build: "./letsencrypt-code"
              restart: always
              volumes:
                - "{{root_apps_dir}}:/apps"
                - "{{acme_dir}}:{{in_container_acme_dir}}"
                - ./letsencrypt/:/etc/letsencrypt/
              environment:
                - "EMAIL={{letsencrypt_email}}"
          networks:
            # `balancer_network` will create
            # so containers can join to this network for availabilty from nginx
            network:

    - name: Run balancer and letsencrypt_worker in docker-compose
      docker_service:
        state: present
        recreate: always
        # project_name: balancer
        project_src: "{{root_balancer_dir}}"

    - assert:
        that:
          - "nginx.balancer.state.running"


    - name: Add common ssl nginx snippets
      copy:
        dest: "{{balancer_snippet_ssl_file}}"
        content: |
          # from https://cipherli.st/
          # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html

          ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_ecdh_curve secp384r1;
          ssl_session_cache shared:SSL:10m;
          ssl_session_tickets off;
          ssl_stapling on;
          ssl_stapling_verify on;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout 5s;
          # Disable preloading HSTS for now.  You can use the commented out header line that includes
          # the "preload" directive if you understand the implications.
          #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

          # TODO: implement `openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048`
          # add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
          # add_header X-Frame-Options DENY;
          # add_header X-Content-Type-Options nosniff;
          #
          # ssl_dhparam /etc/ssl/certs/dhparam.pem;


    # - expect:
    #     command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
    #     responses:
    # - name: Generate Strong Diffie-Hellman Group
    #   command:
    #   # args:
      #   removes: /etc/ssl/certs/dhparam.pem

    # TODO: add timeout
    # check for container is not resttarting
    # check logs

#
